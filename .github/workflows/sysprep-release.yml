name: Manual Build & Release Sysprep Preparator

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore SysprepPreparator.sln

      - name: Build Solution & Save EXE in Root
        shell: pwsh
        run: |
          # Build solution
          msbuild SysprepPreparator.sln /t:Build /p:Configuration=Release

          # Find the EXE from build output
          $exe = Get-ChildItem -Path . -Recurse -Include "SysprepPreparator.exe" | Select-Object -First 1
          if (-not $exe) { Write-Error "Could not find SysprepPreparator.exe"; exit 1 }

          # Copy to root
          $dest = "$PWD\SysprepPreparator.exe"
          Copy-Item $exe.FullName $dest -Force
          echo "EXE_PATH=$dest" >> $env:GITHUB_ENV
          Write-Host "EXE copied to repo root: $dest"

      - name: Get latest tag
        id: get_tag
        shell: pwsh
        run: |
          $tags = git tag
          if ($tags) {
              $latestTag = git describe --tags --abbrev=0
          } else {
              $latestTag = "v0.0"
          }
          echo "latest_tag=$latestTag" >> $env:GITHUB_ENV

      - name: Calculate next version
        id: version
        shell: pwsh
        run: |
          if ($env:latest_tag -eq "v0.0") {
            $newVersion = "0.1"
          } else {
            $ver = $env:latest_tag.TrimStart("v")
            $parts = $ver.Split('.')
            $major = [int]$parts[0]
            $minor = [int]$parts[1] + 1
            $newVersion = "$major.$minor"
          }
          echo "version=$newVersion" >> $env:GITHUB_ENV
          Write-Host "Next version: v$newVersion"

      - name: Generate Release Notes
        id: notes
        shell: pwsh
        run: |
          if ($env:latest_tag -eq "v0.0") {
            $commits = git log --pretty=format:"* %s (%h)"
          } else {
            $commits = git log $env:latest_tag..HEAD --pretty=format:"* %s (%h)"
          }
          if (-not $commits) { $commits = "Initial release" }
          # Force newlines
          $commits = $commits -replace "`r?`n", "`n"
          echo "notes=$commits" >> $env:GITHUB_ENV

      - name: Rename EXE to include version
        shell: pwsh
        run: |
          $exePath = $env:EXE_PATH
          $newExe = "./SysprepPreparator_v${env:version}.exe"
          Rename-Item $exePath $newExe -Force
          echo "EXE_PATH=$newExe" >> $env:GITHUB_ENV
          Write-Host "EXE renamed for release: $newExe"

      - name: Upload EXE Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SysprepPreparator_v${{ env.version }}
          path: ${{ env.EXE_PATH }}
          if-no-files-found: error

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: "Sysprep Preparator v${{ env.version }}"
          body: ${{ env.notes }}
          files: ${{ env.EXE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
