name: Manual Build & Release Sysprep Preperator

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore SysprepPreparator.sln

      - name: Build Solution
        shell: pwsh
        run: |
          # Build the solution in Release mode
          msbuild SysprepPreparator.sln /t:Build /p:Configuration=Release

          # Find the EXE in the output folder
          $exe = Get-ChildItem -Path . -Recurse -Include "SysprepPreparator.exe" | Select-Object -First 1

          if ($exe) {
              # Copy and rename the EXE to the repo root
              $dest = "$PWD\SysprepPreperator.exe"
              Copy-Item "$($exe.FullName)" $dest -Force
              Write-Host "EXE saved to repo root: $dest"
          } else {
              Write-Warning "Could not find SysprepPreparator.exe. Check build output path."
              exit 1
          }


      - name: Get latest tag
        id: get_tag
        shell: pwsh
        run: |
          # Check if any tags exist
          $tags = git tag
          if ($tags) {
              $latestTag = git describe --tags --abbrev=0
              Write-Host "Latest tag found: $latestTag"
          } else {
              $latestTag = "v0.0"
              Write-Host " No tags found, starting fresh at v0.1"
          }
          echo "latest_tag=$latestTag" >> $env:GITHUB_ENV

      - name: Calculate next version
        id: version
        shell: pwsh
        run: |
          $ver = $env:latest_tag.TrimStart("v")
          $parts = $ver.Split('.')
          $major = [int]$parts[0]
          $minor = [int]$parts[1]

          if ($ver -eq "0.0") {
            $newVersion = "0.1"
          } else {
            $minor += 1
            $newVersion = "$major.$minor"
          }

          echo "version=$newVersion" >> $env:GITHUB_ENV
          Write-Host "Next version: v$newVersion"


      - name: Generate Release Notes
        id: notes
        shell: pwsh
        run: |
          if ($env:latest_tag -eq "v0.0") {
            # First release → include all commits
            $commits = git log --pretty=format:"* %s (%h)"
          } else {
            # Subsequent releases → commits since last tag
            $commits = git log $env:latest_tag..HEAD --pretty=format:"* %s (%h)"
          }

          if (-not $commits) { $commits = "Initial release" }
          echo "notes=$commits" >> $env:GITHUB_ENV


      - name: Rename EXE
        shell: pwsh
        run: |
          # Search recursively for EXE in bin\Release folders
          $exe = Get-ChildItem -Path . -Recurse -Include "SysprepPreperator.exe" |
                Where-Object { $_.FullName -match "bin\\Release" } |
                Select-Object -First 1

          if ($exe) {
            $newExe = "$($exe.DirectoryName)\SysprepPreperator_v${env:version}.exe"
            Rename-Item $exe.FullName $newExe -Force
            echo "EXE_PATH=$newExe" >> $env:GITHUB_ENV
            Write-Host "EXE found and renamed: $newExe"
          } else {
            Write-Warning "Could not find SysprepPreperator.exe. Check MSBuild output path and project name."
          }


      - name: Upload EXE Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SysprepPreparator_v${{ env.version }}
          path: ${{ env.EXE_PATH }}
          if-no-files-found: error

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: "SysprepPreparator v${{ env.version }}"
          body: ${{ env.notes }}
          files: ${{ env.EXE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
